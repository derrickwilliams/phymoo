{"version":3,"sources":["/Users/derwilliams/workspace/me/projects/phymoo/www/lib/angular-ui-router/src/urlRouter.js"],"names":[],"mappings":"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","file":"urlRouter-compiled.js","sourcesContent":["/**\n * @ngdoc object\n * @name ui.router.router.$urlRouterProvider\n *\n * @requires ui.router.util.$urlMatcherFactoryProvider\n * @requires $locationProvider\n *\n * @description\n * `$urlRouterProvider` has the responsibility of watching `$location`. \n * When `$location` changes it runs through a list of rules one by one until a \n * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify \n * a url in a state configuration. All urls are compiled into a UrlMatcher object.\n *\n * There are several methods on `$urlRouterProvider` that make it useful to use directly\n * in your module config.\n */\n$UrlRouterProvider.$inject = ['$locationProvider', '$urlMatcherFactoryProvider'];\nfunction $UrlRouterProvider(   $locationProvider,   $urlMatcherFactory) {\n  var rules = [], otherwise = null, interceptDeferred = false, listener;\n\n  // Returns a string that is a prefix of all strings matching the RegExp\n  function regExpPrefix(re) {\n    var prefix = /^\\^((?:\\\\[^a-zA-Z0-9]|[^\\\\\\[\\]\\^$*+?.()|{}]+)*)/.exec(re.source);\n    return (prefix != null) ? prefix[1].replace(/\\\\(.)/g, \"$1\") : '';\n  }\n\n  // Interpolates matched values into a String.replace()-style pattern\n  function interpolate(pattern, match) {\n    return pattern.replace(/\\$(\\$|\\d{1,2})/, function (m, what) {\n      return match[what === '$' ? 0 : Number(what)];\n    });\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.router.$urlRouterProvider#rule\n   * @methodOf ui.router.router.$urlRouterProvider\n   *\n   * @description\n   * Defines rules that are used by `$urlRouterProvider` to find matches for\n   * specific URLs.\n   *\n   * @example\n   * <pre>\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   // Here's an example of how you might allow case insensitive urls\n   *   $urlRouterProvider.rule(function ($injector, $location) {\n   *     var path = $location.path(),\n   *         normalized = path.toLowerCase();\n   *\n   *     if (path !== normalized) {\n   *       return normalized;\n   *     }\n   *   });\n   * });\n   * </pre>\n   *\n   * @param {object} rule Handler function that takes `$injector` and `$location`\n   * services as arguments. You can use them to return a valid path as a string.\n   *\n   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\n   */\n  this.rule = function (rule) {\n    if (!isFunction(rule)) throw new Error(\"'rule' must be a function\");\n    rules.push(rule);\n    return this;\n  };\n\n  /**\n   * @ngdoc object\n   * @name ui.router.router.$urlRouterProvider#otherwise\n   * @methodOf ui.router.router.$urlRouterProvider\n   *\n   * @description\n   * Defines a path that is used when an invalid route is requested.\n   *\n   * @example\n   * <pre>\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   // if the path doesn't match any of the urls you configured\n   *   // otherwise will take care of routing the user to the\n   *   // specified url\n   *   $urlRouterProvider.otherwise('/index');\n   *\n   *   // Example of using function rule as param\n   *   $urlRouterProvider.otherwise(function ($injector, $location) {\n   *     return '/a/valid/url';\n   *   });\n   * });\n   * </pre>\n   *\n   * @param {string|object} rule The url path you want to redirect to or a function \n   * rule that returns the url path. The function version is passed two params: \n   * `$injector` and `$location` services, and must return a url string.\n   *\n   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\n   */\n  this.otherwise = function (rule) {\n    if (isString(rule)) {\n      var redirect = rule;\n      rule = function () { return redirect; };\n    }\n    else if (!isFunction(rule)) throw new Error(\"'rule' must be a function\");\n    otherwise = rule;\n    return this;\n  };\n\n\n  function handleIfMatch($injector, handler, match) {\n    if (!match) return false;\n    var result = $injector.invoke(handler, handler, { $match: match });\n    return isDefined(result) ? result : true;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.router.$urlRouterProvider#when\n   * @methodOf ui.router.router.$urlRouterProvider\n   *\n   * @description\n   * Registers a handler for a given url matching. if handle is a string, it is\n   * treated as a redirect, and is interpolated according to the syntax of match\n   * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).\n   *\n   * If the handler is a function, it is injectable. It gets invoked if `$location`\n   * matches. You have the option of inject the match object as `$match`.\n   *\n   * The handler can return\n   *\n   * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`\n   *   will continue trying to find another one that matches.\n   * - **string** which is treated as a redirect and passed to `$location.url()`\n   * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.\n   *\n   * @example\n   * <pre>\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {\n   *     if ($state.$current.navigable !== state ||\n   *         !equalForKeys($match, $stateParams) {\n   *      $state.transitionTo(state, $match, false);\n   *     }\n   *   });\n   * });\n   * </pre>\n   *\n   * @param {string|object} what The incoming path that you want to redirect.\n   * @param {string|object} handler The path you want to redirect your user to.\n   */\n  this.when = function (what, handler) {\n    var redirect, handlerIsString = isString(handler);\n    if (isString(what)) what = $urlMatcherFactory.compile(what);\n\n    if (!handlerIsString && !isFunction(handler) && !isArray(handler))\n      throw new Error(\"invalid 'handler' in when()\");\n\n    var strategies = {\n      matcher: function (what, handler) {\n        if (handlerIsString) {\n          redirect = $urlMatcherFactory.compile(handler);\n          handler = ['$match', function ($match) { return redirect.format($match); }];\n        }\n        return extend(function ($injector, $location) {\n          return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));\n        }, {\n          prefix: isString(what.prefix) ? what.prefix : ''\n        });\n      },\n      regex: function (what, handler) {\n        if (what.global || what.sticky) throw new Error(\"when() RegExp must not be global or sticky\");\n\n        if (handlerIsString) {\n          redirect = handler;\n          handler = ['$match', function ($match) { return interpolate(redirect, $match); }];\n        }\n        return extend(function ($injector, $location) {\n          return handleIfMatch($injector, handler, what.exec($location.path()));\n        }, {\n          prefix: regExpPrefix(what)\n        });\n      }\n    };\n\n    var check = { matcher: $urlMatcherFactory.isMatcher(what), regex: what instanceof RegExp };\n\n    for (var n in check) {\n      if (check[n]) return this.rule(strategies[n](what, handler));\n    }\n\n    throw new Error(\"invalid 'what' in when()\");\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.router.$urlRouterProvider#deferIntercept\n   * @methodOf ui.router.router.$urlRouterProvider\n   *\n   * @description\n   * Disables (or enables) deferring location change interception.\n   *\n   * If you wish to customize the behavior of syncing the URL (for example, if you wish to\n   * defer a transition but maintain the current URL), call this method at configuration time.\n   * Then, at run time, call `$urlRouter.listen()` after you have configured your own\n   * `$locationChangeSuccess` event handler.\n   *\n   * @example\n   * <pre>\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *\n   *   // Prevent $urlRouter from automatically intercepting URL changes;\n   *   // this allows you to configure custom behavior in between\n   *   // location changes and route synchronization:\n   *   $urlRouterProvider.deferIntercept();\n   *\n   * }).run(function ($rootScope, $urlRouter, UserService) {\n   *\n   *   $rootScope.$on('$locationChangeSuccess', function(e) {\n   *     // UserService is an example service for managing user state\n   *     if (UserService.isLoggedIn()) return;\n   *\n   *     // Prevent $urlRouter's default handler from firing\n   *     e.preventDefault();\n   *\n   *     UserService.handleLogin().then(function() {\n   *       // Once the user has logged in, sync the current URL\n   *       // to the router:\n   *       $urlRouter.sync();\n   *     });\n   *   });\n   *\n   *   // Configures $urlRouter's listener *after* your custom listener\n   *   $urlRouter.listen();\n   * });\n   * </pre>\n   *\n   * @param {boolean} defer Indicates whether to defer location change interception. Passing\n            no parameter is equivalent to `true`.\n   */\n  this.deferIntercept = function (defer) {\n    if (defer === undefined) defer = true;\n    interceptDeferred = defer;\n  };\n\n  /**\n   * @ngdoc object\n   * @name ui.router.router.$urlRouter\n   *\n   * @requires $location\n   * @requires $rootScope\n   * @requires $injector\n   * @requires $browser\n   *\n   * @description\n   *\n   */\n  this.$get = $get;\n  $get.$inject = ['$location', '$rootScope', '$injector', '$browser'];\n  function $get(   $location,   $rootScope,   $injector,   $browser) {\n\n    var baseHref = $browser.baseHref(), location = $location.url(), lastPushedUrl;\n\n    function appendBasePath(url, isHtml5, absolute) {\n      if (baseHref === '/') return url;\n      if (isHtml5) return baseHref.slice(0, -1) + url;\n      if (absolute) return baseHref.slice(1) + url;\n      return url;\n    }\n\n    // TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree\n    function update(evt) {\n      if (evt && evt.defaultPrevented) return;\n      var ignoreUpdate = lastPushedUrl && $location.url() === lastPushedUrl;\n      lastPushedUrl = undefined;\n      if (ignoreUpdate) return true;\n\n      function check(rule) {\n        var handled = rule($injector, $location);\n\n        if (!handled) return false;\n        if (isString(handled)) $location.replace().url(handled);\n        return true;\n      }\n      var n = rules.length, i;\n\n      for (i = 0; i < n; i++) {\n        if (check(rules[i])) return;\n      }\n      // always check otherwise last to allow dynamic updates to the set of rules\n      if (otherwise) check(otherwise);\n    }\n\n    function listen() {\n      listener = listener || $rootScope.$on('$locationChangeSuccess', update);\n      return listener;\n    }\n\n    if (!interceptDeferred) listen();\n\n    return {\n      /**\n       * @ngdoc function\n       * @name ui.router.router.$urlRouter#sync\n       * @methodOf ui.router.router.$urlRouter\n       *\n       * @description\n       * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.\n       * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,\n       * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed\n       * with the transition by calling `$urlRouter.sync()`.\n       *\n       * @example\n       * <pre>\n       * angular.module('app', ['ui.router'])\n       *   .run(function($rootScope, $urlRouter) {\n       *     $rootScope.$on('$locationChangeSuccess', function(evt) {\n       *       // Halt state change from even starting\n       *       evt.preventDefault();\n       *       // Perform custom logic\n       *       var meetsRequirement = ...\n       *       // Continue with the update and state transition if logic allows\n       *       if (meetsRequirement) $urlRouter.sync();\n       *     });\n       * });\n       * </pre>\n       */\n      sync: function() {\n        update();\n      },\n\n      listen: function() {\n        return listen();\n      },\n\n      update: function(read) {\n        if (read) {\n          location = $location.url();\n          return;\n        }\n        if ($location.url() === location) return;\n\n        $location.url(location);\n        $location.replace();\n      },\n\n      push: function(urlMatcher, params, options) {\n        $location.url(urlMatcher.format(params || {}));\n        lastPushedUrl = options && options.$$avoidResync ? $location.url() : undefined;\n        if (options && options.replace) $location.replace();\n      },\n\n      /**\n       * @ngdoc function\n       * @name ui.router.router.$urlRouter#href\n       * @methodOf ui.router.router.$urlRouter\n       *\n       * @description\n       * A URL generation method that returns the compiled URL for a given\n       * {@link ui.router.util.type:UrlMatcher `UrlMatcher`}, populated with the provided parameters.\n       *\n       * @example\n       * <pre>\n       * $bob = $urlRouter.href(new UrlMatcher(\"/about/:person\"), {\n       *   person: \"bob\"\n       * });\n       * // $bob == \"/about/bob\";\n       * </pre>\n       *\n       * @param {UrlMatcher} urlMatcher The `UrlMatcher` object which is used as the template of the URL to generate.\n       * @param {object=} params An object of parameter values to fill the matcher's required parameters.\n       * @param {object=} options Options object. The options are:\n       *\n       * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n       *\n       * @returns {string} Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`\n       */\n      href: function(urlMatcher, params, options) {\n        if (!urlMatcher.validates(params)) return null;\n\n        var isHtml5 = $locationProvider.html5Mode();\n        if (angular.isObject(isHtml5)) {\n          isHtml5 = isHtml5.enabled;\n        }\n        \n        var url = urlMatcher.format(params);\n        options = options || {};\n\n        if (!isHtml5 && url !== null) {\n          url = \"#\" + $locationProvider.hashPrefix() + url;\n        }\n        url = appendBasePath(url, isHtml5, options.absolute);\n\n        if (!options.absolute || !url) {\n          return url;\n        }\n\n        var slash = (!isHtml5 && url ? '/' : ''), port = $location.port();\n        port = (port === 80 || port === 443 ? '' : ':' + port);\n\n        return [$location.protocol(), '://', $location.host(), port, slash, url].join('');\n      }\n    };\n  }\n}\n\nangular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);\n"]}