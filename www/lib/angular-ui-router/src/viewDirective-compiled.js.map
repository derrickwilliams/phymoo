{"version":3,"sources":["/Users/derwilliams/workspace/me/projects/phymoo/www/lib/angular-ui-router/src/viewDirective.js"],"names":[],"mappings":"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","file":"viewDirective-compiled.js","sourcesContent":["/**\n * @ngdoc directive\n * @name ui.router.state.directive:ui-view\n *\n * @requires ui.router.state.$state\n * @requires $compile\n * @requires $controller\n * @requires $injector\n * @requires ui.router.state.$uiViewScroll\n * @requires $document\n *\n * @restrict ECA\n *\n * @description\n * The ui-view directive tells $state where to place your templates.\n *\n * @param {string=} name A view name. The name should be unique amongst the other views in the\n * same state. You can have views of the same name that live in different states.\n *\n * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window\n * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll\n * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you\n * scroll ui-view elements into view when they are populated during a state activation.\n *\n * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)\n * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*\n *\n * @param {string=} onload Expression to evaluate whenever the view updates.\n * \n * @example\n * A view can be unnamed or named. \n * <pre>\n * <!-- Unnamed -->\n * <div ui-view></div> \n * \n * <!-- Named -->\n * <div ui-view=\"viewName\"></div>\n * </pre>\n *\n * You can only have one unnamed view within any template (or root html). If you are only using a \n * single view and it is unnamed then you can populate it like so:\n * <pre>\n * <div ui-view></div> \n * $stateProvider.state(\"home\", {\n *   template: \"<h1>HELLO!</h1>\"\n * })\n * </pre>\n * \n * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#views `views`}\n * config property, by name, in this case an empty name:\n * <pre>\n * $stateProvider.state(\"home\", {\n *   views: {\n *     \"\": {\n *       template: \"<h1>HELLO!</h1>\"\n *     }\n *   }    \n * })\n * </pre>\n * \n * But typically you'll only use the views property if you name your view or have more than one view \n * in the same template. There's not really a compelling reason to name a view if its the only one, \n * but you could if you wanted, like so:\n * <pre>\n * <div ui-view=\"main\"></div>\n * </pre> \n * <pre>\n * $stateProvider.state(\"home\", {\n *   views: {\n *     \"main\": {\n *       template: \"<h1>HELLO!</h1>\"\n *     }\n *   }    \n * })\n * </pre>\n * \n * Really though, you'll use views to set up multiple views:\n * <pre>\n * <div ui-view></div>\n * <div ui-view=\"chart\"></div> \n * <div ui-view=\"data\"></div> \n * </pre>\n * \n * <pre>\n * $stateProvider.state(\"home\", {\n *   views: {\n *     \"\": {\n *       template: \"<h1>HELLO!</h1>\"\n *     },\n *     \"chart\": {\n *       template: \"<chart_thing/>\"\n *     },\n *     \"data\": {\n *       template: \"<data_thing/>\"\n *     }\n *   }    \n * })\n * </pre>\n *\n * Examples for `autoscroll`:\n *\n * <pre>\n * <!-- If autoscroll present with no expression,\n *      then scroll ui-view into view -->\n * <ui-view autoscroll/>\n *\n * <!-- If autoscroll present with valid expression,\n *      then scroll ui-view into view if expression evaluates to true -->\n * <ui-view autoscroll='true'/>\n * <ui-view autoscroll='false'/>\n * <ui-view autoscroll='scopeVariable'/>\n * </pre>\n */\n$ViewDirective.$inject = ['$state', '$injector', '$uiViewScroll', '$interpolate'];\nfunction $ViewDirective(   $state,   $injector,   $uiViewScroll,   $interpolate) {\n\n  function getService() {\n    return ($injector.has) ? function(service) {\n      return $injector.has(service) ? $injector.get(service) : null;\n    } : function(service) {\n      try {\n        return $injector.get(service);\n      } catch (e) {\n        return null;\n      }\n    };\n  }\n\n  var service = getService(),\n      $animator = service('$animator'),\n      $animate = service('$animate');\n\n  // Returns a set of DOM manipulation functions based on which Angular version\n  // it should use\n  function getRenderer(attrs, scope) {\n    var statics = function() {\n      return {\n        enter: function (element, target, cb) { target.after(element); cb(); },\n        leave: function (element, cb) { element.remove(); cb(); }\n      };\n    };\n\n    if ($animate) {\n      return {\n        enter: function(element, target, cb) {\n          var promise = $animate.enter(element, null, target, cb);\n          if (promise && promise.then) promise.then(cb);\n        },\n        leave: function(element, cb) {\n          var promise = $animate.leave(element, cb);\n          if (promise && promise.then) promise.then(cb);\n        }\n      };\n    }\n\n    if ($animator) {\n      var animate = $animator && $animator(scope, attrs);\n\n      return {\n        enter: function(element, target, cb) {animate.enter(element, null, target); cb(); },\n        leave: function(element, cb) { animate.leave(element); cb(); }\n      };\n    }\n\n    return statics();\n  }\n\n  var directive = {\n    restrict: 'ECA',\n    terminal: true,\n    priority: 400,\n    transclude: 'element',\n    compile: function (tElement, tAttrs, $transclude) {\n      return function (scope, $element, attrs) {\n        var previousEl, currentEl, currentScope, latestLocals,\n            onloadExp     = attrs.onload || '',\n            autoScrollExp = attrs.autoscroll,\n            renderer      = getRenderer(attrs, scope);\n\n        scope.$on('$stateChangeSuccess', function() {\n          updateView(false);\n        });\n        scope.$on('$viewContentLoading', function() {\n          updateView(false);\n        });\n\n        updateView(true);\n\n        function cleanupLastView() {\n          if (previousEl) {\n            previousEl.remove();\n            previousEl = null;\n          }\n\n          if (currentScope) {\n            currentScope.$destroy();\n            currentScope = null;\n          }\n\n          if (currentEl) {\n            renderer.leave(currentEl, function() {\n              previousEl = null;\n            });\n\n            previousEl = currentEl;\n            currentEl = null;\n          }\n        }\n\n        function updateView(firstTime) {\n          var newScope,\n              name            = getUiViewName(scope, attrs, $element, $interpolate),\n              previousLocals  = name && $state.$current && $state.$current.locals[name];\n\n          if (!firstTime && previousLocals === latestLocals) return; // nothing to do\n          newScope = scope.$new();\n          latestLocals = $state.$current.locals[name];\n\n          var clone = $transclude(newScope, function(clone) {\n            renderer.enter(clone, $element, function onUiViewEnter() {\n              if(currentScope) {\n                currentScope.$emit('$viewContentAnimationEnded');\n              }\n\n              if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {\n                $uiViewScroll(clone);\n              }\n            });\n            cleanupLastView();\n          });\n\n          currentEl = clone;\n          currentScope = newScope;\n          /**\n           * @ngdoc event\n           * @name ui.router.state.directive:ui-view#$viewContentLoaded\n           * @eventOf ui.router.state.directive:ui-view\n           * @eventType emits on ui-view directive scope\n           * @description           *\n           * Fired once the view is **loaded**, *after* the DOM is rendered.\n           *\n           * @param {Object} event Event object.\n           */\n          currentScope.$emit('$viewContentLoaded');\n          currentScope.$eval(onloadExp);\n        }\n      };\n    }\n  };\n\n  return directive;\n}\n\n$ViewDirectiveFill.$inject = ['$compile', '$controller', '$state', '$interpolate'];\nfunction $ViewDirectiveFill (  $compile,   $controller,   $state,   $interpolate) {\n  return {\n    restrict: 'ECA',\n    priority: -400,\n    compile: function (tElement) {\n      var initial = tElement.html();\n      return function (scope, $element, attrs) {\n        var current = $state.$current,\n            name = getUiViewName(scope, attrs, $element, $interpolate),\n            locals  = current && current.locals[name];\n\n        if (! locals) {\n          return;\n        }\n\n        $element.data('$uiView', { name: name, state: locals.$$state });\n        $element.html(locals.$template ? locals.$template : initial);\n\n        var link = $compile($element.contents());\n\n        if (locals.$$controller) {\n          locals.$scope = scope;\n          var controller = $controller(locals.$$controller, locals);\n          if (locals.$$controllerAs) {\n            scope[locals.$$controllerAs] = controller;\n          }\n          $element.data('$ngControllerController', controller);\n          $element.children().data('$ngControllerController', controller);\n        }\n\n        link(scope);\n      };\n    }\n  };\n}\n\n/**\n * Shared ui-view code for both directives:\n * Given scope, element, and its attributes, return the view's name\n */\nfunction getUiViewName(scope, attrs, element, $interpolate) {\n  var name = $interpolate(attrs.uiView || attrs.name || '')(scope);\n  var inherited = element.inheritedData('$uiView');\n  return name.indexOf('@') >= 0 ?  name :  (name + '@' + (inherited ? inherited.state.name : ''));\n}\n\nangular.module('ui.router.state').directive('uiView', $ViewDirective);\nangular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);\n"]}