{"version":3,"sources":["/Users/derwilliams/workspace/me/projects/phymoo/www/lib/localforage/src/utils/serializer.js"],"names":[],"mappings":"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","file":"serializer-compiled.js","sourcesContent":["(function() {\n    'use strict';\n\n    // Sadly, the best way to save binary data in WebSQL/localStorage is serializing\n    // it to Base64, so this is how we store it to prevent very strange errors with less\n    // verbose ways of binary <-> string data storage.\n    var BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n    var SERIALIZED_MARKER = '__lfsc__:';\n    var SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;\n\n    // OMG the serializations!\n    var TYPE_ARRAYBUFFER = 'arbf';\n    var TYPE_BLOB = 'blob';\n    var TYPE_INT8ARRAY = 'si08';\n    var TYPE_UINT8ARRAY = 'ui08';\n    var TYPE_UINT8CLAMPEDARRAY = 'uic8';\n    var TYPE_INT16ARRAY = 'si16';\n    var TYPE_INT32ARRAY = 'si32';\n    var TYPE_UINT16ARRAY = 'ur16';\n    var TYPE_UINT32ARRAY = 'ui32';\n    var TYPE_FLOAT32ARRAY = 'fl32';\n    var TYPE_FLOAT64ARRAY = 'fl64';\n    var TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH +\n                                        TYPE_ARRAYBUFFER.length;\n\n    // Serialize a value, afterwards executing a callback (which usually\n    // instructs the `setItem()` callback/promise to be executed). This is how\n    // we store binary data with localStorage.\n    function serialize(value, callback) {\n        var valueString = '';\n        if (value) {\n            valueString = value.toString();\n        }\n\n        // Cannot use `value instanceof ArrayBuffer` or such here, as these\n        // checks fail when running the tests using casper.js...\n        //\n        // TODO: See why those tests fail and use a better solution.\n        if (value && (value.toString() === '[object ArrayBuffer]' ||\n                      value.buffer &&\n                      value.buffer.toString() === '[object ArrayBuffer]')) {\n            // Convert binary arrays to a string and prefix the string with\n            // a special marker.\n            var buffer;\n            var marker = SERIALIZED_MARKER;\n\n            if (value instanceof ArrayBuffer) {\n                buffer = value;\n                marker += TYPE_ARRAYBUFFER;\n            } else {\n                buffer = value.buffer;\n\n                if (valueString === '[object Int8Array]') {\n                    marker += TYPE_INT8ARRAY;\n                } else if (valueString === '[object Uint8Array]') {\n                    marker += TYPE_UINT8ARRAY;\n                } else if (valueString === '[object Uint8ClampedArray]') {\n                    marker += TYPE_UINT8CLAMPEDARRAY;\n                } else if (valueString === '[object Int16Array]') {\n                    marker += TYPE_INT16ARRAY;\n                } else if (valueString === '[object Uint16Array]') {\n                    marker += TYPE_UINT16ARRAY;\n                } else if (valueString === '[object Int32Array]') {\n                    marker += TYPE_INT32ARRAY;\n                } else if (valueString === '[object Uint32Array]') {\n                    marker += TYPE_UINT32ARRAY;\n                } else if (valueString === '[object Float32Array]') {\n                    marker += TYPE_FLOAT32ARRAY;\n                } else if (valueString === '[object Float64Array]') {\n                    marker += TYPE_FLOAT64ARRAY;\n                } else {\n                    callback(new Error('Failed to get type for BinaryArray'));\n                }\n            }\n\n            callback(marker + bufferToString(buffer));\n        } else if (valueString === '[object Blob]') {\n            // Conver the blob to a binaryArray and then to a string.\n            var fileReader = new FileReader();\n\n            fileReader.onload = function() {\n                var str = bufferToString(this.result);\n\n                callback(SERIALIZED_MARKER + TYPE_BLOB + str);\n            };\n\n            fileReader.readAsArrayBuffer(value);\n        } else {\n            try {\n                callback(JSON.stringify(value));\n            } catch (e) {\n                window.console.error(\"Couldn't convert value into a JSON \" +\n                                     'string: ', value);\n\n                callback(null, e);\n            }\n        }\n    }\n\n    // Deserialize data we've inserted into a value column/field. We place\n    // special markers into our strings to mark them as encoded; this isn't\n    // as nice as a meta field, but it's the only sane thing we can do whilst\n    // keeping localStorage support intact.\n    //\n    // Oftentimes this will just deserialize JSON content, but if we have a\n    // special marker (SERIALIZED_MARKER, defined above), we will extract\n    // some kind of arraybuffer/binary data/typed array out of the string.\n    function deserialize(value) {\n        // If we haven't marked this string as being specially serialized (i.e.\n        // something other than serialized JSON), we can just return it and be\n        // done with it.\n        if (value.substring(0,\n            SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {\n            return JSON.parse(value);\n        }\n\n        // The following code deals with deserializing some kind of Blob or\n        // TypedArray. First we separate out the type of data we're dealing\n        // with from the data itself.\n        var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);\n        var type = value.substring(SERIALIZED_MARKER_LENGTH,\n                                   TYPE_SERIALIZED_MARKER_LENGTH);\n\n        var buffer = stringToBuffer(serializedString);\n\n        // Return the right type based on the code/type set during\n        // serialization.\n        switch (type) {\n            case TYPE_ARRAYBUFFER:\n                return buffer;\n            case TYPE_BLOB:\n                return new Blob([buffer]);\n            case TYPE_INT8ARRAY:\n                return new Int8Array(buffer);\n            case TYPE_UINT8ARRAY:\n                return new Uint8Array(buffer);\n            case TYPE_UINT8CLAMPEDARRAY:\n                return new Uint8ClampedArray(buffer);\n            case TYPE_INT16ARRAY:\n                return new Int16Array(buffer);\n            case TYPE_UINT16ARRAY:\n                return new Uint16Array(buffer);\n            case TYPE_INT32ARRAY:\n                return new Int32Array(buffer);\n            case TYPE_UINT32ARRAY:\n                return new Uint32Array(buffer);\n            case TYPE_FLOAT32ARRAY:\n                return new Float32Array(buffer);\n            case TYPE_FLOAT64ARRAY:\n                return new Float64Array(buffer);\n            default:\n                throw new Error('Unkown type: ' + type);\n        }\n    }\n\n    function stringToBuffer(serializedString) {\n        // Fill the string into a ArrayBuffer.\n        var bufferLength = serializedString.length * 0.75;\n        var len = serializedString.length;\n        var i;\n        var p = 0;\n        var encoded1, encoded2, encoded3, encoded4;\n\n        if (serializedString[serializedString.length - 1] === '=') {\n            bufferLength--;\n            if (serializedString[serializedString.length - 2] === '=') {\n                bufferLength--;\n            }\n        }\n\n        var buffer = new ArrayBuffer(bufferLength);\n        var bytes = new Uint8Array(buffer);\n\n        for (i = 0; i < len; i+=4) {\n            encoded1 = BASE_CHARS.indexOf(serializedString[i]);\n            encoded2 = BASE_CHARS.indexOf(serializedString[i+1]);\n            encoded3 = BASE_CHARS.indexOf(serializedString[i+2]);\n            encoded4 = BASE_CHARS.indexOf(serializedString[i+3]);\n\n            /*jslint bitwise: true */\n            bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n            bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n            bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n        }\n        return buffer;\n    }\n\n    // Converts a buffer to a string to store, serialized, in the backend\n    // storage library.\n    function bufferToString(buffer) {\n        // base64-arraybuffer\n        var bytes = new Uint8Array(buffer);\n        var base64String = '';\n        var i;\n\n        for (i = 0; i < bytes.length; i += 3) {\n            /*jslint bitwise: true */\n            base64String += BASE_CHARS[bytes[i] >> 2];\n            base64String += BASE_CHARS[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n            base64String += BASE_CHARS[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n            base64String += BASE_CHARS[bytes[i + 2] & 63];\n        }\n\n        if ((bytes.length % 3) === 2) {\n            base64String = base64String.substring(0, base64String.length - 1) + '=';\n        } else if (bytes.length % 3 === 1) {\n            base64String = base64String.substring(0, base64String.length - 2) + '==';\n        }\n\n        return base64String;\n    }\n\n    var localforageSerializer = {\n        serialize: serialize,\n        deserialize: deserialize,\n        stringToBuffer: stringToBuffer,\n        bufferToString: bufferToString\n    };\n\n    if (typeof module !== 'undefined' && module.exports && typeof require !== 'undefined') {\n        module.exports = localforageSerializer;\n    } else if (typeof define === 'function' && define.amd) {\n        define('localforageSerializer', function() {\n            return localforageSerializer;\n        });\n    } else {\n        this.localforageSerializer = localforageSerializer;\n    }\n}).call(window);\n"]}